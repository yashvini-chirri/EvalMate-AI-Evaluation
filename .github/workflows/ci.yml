name: EvalMate CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with pytest
      run: |
        python -m pytest backend/tests/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Test API endpoints
      run: |
        python test_server.py
      env:
        PYTHONPATH: ${{ github.workspace }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check .
    
    - name: Check imports with isort
      run: |
        isort --check-only .

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Security scan with bandit
      run: |
        bandit -r . -x ./backend/tests/
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Build application
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Build completed successfully"
    
    - name: Create deployment artifact
      run: |
        tar -czf evalmate-build.tar.gz \
          --exclude='.git' \
          --exclude='.venv' \
          --exclude='node_modules' \
          --exclude='*.log' \
          --exclude='*.db' \
          .
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: evalmate-build
        path: evalmate-build.tar.gz
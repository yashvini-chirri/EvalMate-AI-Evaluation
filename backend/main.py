import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from app.api.routes import auth, tests, students, examiners, evaluations
from app.api.routes.ai_semantic_evaluation import router as ai_semantic_router
from app.db.database import engine, Base
from app.core.config import settings
import os

# Create database tables
Base.metadata.create_all(bind=engine)

# Initialize FastAPI app
app = FastAPI(
    title="EvalMate - AI-Powered Answer Sheet Evaluation System",
    description="""
    Complete rebuild with AI-powered LangGraph workflow for intelligent evaluation.
    
    Features:
    - AI Text Extraction Agent for intelligent PDF processing
    - AI Intelligent Evaluator for semantic understanding
    - GPT-4 powered evaluation and feedback
    - No cached data - fresh AI processing only
    - Multi-agent LangGraph workflow
    """,
    version="5.0.0-ai-powered"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include API routes
app.include_router(auth.router, prefix="/api/auth", tags=["Authentication"])
app.include_router(tests.router, prefix="/api/tests", tags=["Tests"])
app.include_router(students.router, prefix="/api/students", tags=["Students"])
app.include_router(examiners.router, prefix="/api/examiners", tags=["Examiners"])
app.include_router(evaluations.router, prefix="/api/evaluations", tags=["Evaluations"])
app.include_router(ai_semantic_router, prefix="/api/advanced", tags=["AI-Powered Evaluation"])

# Add demo page route
@app.get("/demo.html")
async def get_demo():
    """Serve the demo HTML page"""
    demo_path = os.path.join(os.path.dirname(__file__), "demo.html")
    if os.path.exists(demo_path):
        return FileResponse(demo_path)
    raise HTTPException(status_code=404, detail="Demo page not found")

@app.get("/demo")
async def get_simple_demo():
    """Serve the simple demo HTML page"""
    demo_path = os.path.join(os.path.dirname(__file__), "demo_simple.html")
    if os.path.exists(demo_path):
        return FileResponse(demo_path)
    raise HTTPException(status_code=404, detail="Demo page not found")

@app.get("/")
async def root():
    """API root endpoint with AI-powered evaluation information"""
    return {
        "message": "EvalMate API - AI-Powered Evaluation System",
        "version": "5.0.0-ai-powered",
        "features": {
            "ai_text_extraction": "GPT-4 powered intelligent text extraction from PDFs",
            "ai_evaluation": "AI models for semantic understanding and evaluation",
            "langgraph_workflow": "Multi-agent workflow with specialized AI agents",
            "no_caching": "Fresh AI processing for every request",
            "intelligent_feedback": "Detailed feedback generated by AI models"
        },
        "ai_agents": [
            "AI Text Extraction Agent - Intelligently extracts text and identifies questions",
            "AI Intelligent Evaluator - Uses AI to evaluate answers with contextual understanding"
        ],
        "evaluation_capabilities": [
            "AI-powered text extraction with question detection",
            "Intelligent semantic evaluation with AI models", 
            "Contextual understanding assessment",
            "AI-generated detailed feedback",
            "No cached data - completely fresh evaluation every time"
        ],
        "endpoints": {
            "/api/advanced/evaluate-semantic": "AI-powered evaluation endpoint",
            "/api/advanced/evaluation-results/{id}": "Get AI evaluation results"
        }
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "evaluation_system": "semantic_analysis_ready"}